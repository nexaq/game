version: '3.5'

services:
  proxy:
    build:
      context: ./proxy
      dockerfile: ./Dockerfile
    container_name: proxy
    ports:
      - "443:443"
      - "8080:80"
    depends_on:
      - client-app
      - backend-app
    env_file:
      - .env
    volumes:
      - ./proxy/conf.d/proxy.conf:/etc/nginx/conf.d/proxy.conf
      - ./proxy/conf.d/ssl:/etc/nginx/conf.d/ssl
      - ./proxy/conf.d/headers:/etc/nginx/conf.d/headers
      - ./proxy/conf.d/redirect:/etc/nginx/conf.d/redirect
      - ./proxy/ssl/:/etc/ssl/
      - ./proxy/error:/var/log/nginx/error
    networks:
      - main-networks
    restart: always

  backend-app:
    build:
      context: ./
      dockerfile: ./backend/Dockerfile
    ports:
      - "${PORT_BACKEND}:${PORT_BACKEND}"
    env_file:
      - .env
    depends_on:
      - postgres
    volumes:
      - ./backend:/var/www/backend
      - ./client:/var/www/client
      - ./ssr:/var/www/ssr
      - ./@types:/var/www/@types

    command: npm run backend:prod
    networks:
      - main-networks
    restart: always

  client-app:
    build:
      context: ./
      dockerfile: ./ssr/Dockerfile
    ports:
      - "${PORT_SSR}:${PORT_SSR}"
    depends_on:
      - backend-app
      - postgres
    env_file:
      - .env
    volumes:
      - ./backend:/var/www/backend
      - ./client:/var/www/client
      - ./ssr:/var/www/ssr
      - ./@types:/var/www/@types
    command: bash -c "npm run build:prod:vendors && npm run ssr:prod"
    networks:
      - main-networks
    restart: always

  postgres:
    container_name: postgres_container
    image: postgres
    env_file:
      - .env
    environment:
      PGDATA: /data/postgres
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-volume:/data/postgres
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - main-networks
    restart: always

networks:
  main-networks:
    driver: bridge

volumes:
  postgres-volume:
  mongo-volume:
